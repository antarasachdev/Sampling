# -*- coding: utf-8 -*-
"""Untitled28.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17xkeSH_GreTmewBml0wysFwi0x-Txa9M
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from imblearn.under_sampling import RandomUnderSampler
from imblearn.over_sampling import SMOTE

data=pd.read_csv('/content/Creditcard_data.csv')
print(data.head())

x=data.drop('Class',axis=1)
y=data['Class']

scaler=StandardScaler()
x_scaled=scaler.fit_transform(x)

from imblearn.over_sampling import RandomOverSampler, SMOTE
ros=RandomOverSampler(random_state=42)
x_ros,y_ros=ros.fit_resample(x_scaled,y)

smote=SMOTE(random_state=42)
x_smote,y_smote=smote.fit_resample(x_scaled,y)

rus=RandomUnderSampler(random_state=42)
x_rus,y_rus=rus.fit_resample(x_scaled,y)

smotee=SMOTE(sampling_strategy=0.5,random_state=42)
x_smotee,y_smotee=smotee.fit_resample(x_scaled,y)

def split_data(x,y):
   return train_test_split(x,y,test_size=0.2,random_state=42,stratify=y)
splits={
    "Original":(x_scaled,y),
    "RandomOverSampler":(x_ros,y_ros),
    "SMOTE":(x_smote,y_smote),
    "Random UnderSampler":(x_rus,y_rus),
    "SMOTEENN":(x_smotee,y_smotee)
}

print(splits)

models={
    "Random Forest":RandomForestClassifier(random_state=42),
    "Logistic Regression":LogisticRegression(random_state=42),

}
results=[]

for method, (x, y) in splits.items():
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42, stratify=y)
    for model_name, model in models.items():
        model.fit(x_train, y_train)
        y_pred = model.predict(x_test)
        accuracy = accuracy_score(y_test, y_pred)
        results.append((method, model_name, accuracy))

res=pd.DataFrame(results,columns=['Sampling Method','Model','Accuracy'])
print(res)

